services:
  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  player-service:
    build: ./player-service
    container_name: player-service
    ports:
      - "${PLAYER_SERVICE_PORT:-3001}:${PLAYER_SERVICE_PORT:-3001}"
    environment:
      - PORT=${PLAYER_SERVICE_PORT:-3001}
      - MONGO_URI=mongodb+srv://${MONGO_USER}:${MONGO_PASSWORD}@${MONGO_CLUSTER}/playerdb?retryWrites=true&w=majority&appName=${MONGO_APP_NAME}
      - LOG_API_URL=http://log-api-service:${LOG_API_SERVICE_PORT:-3004}
      - KAFKA_BROKER=${KAFKA_BROKER}
      - KAFKA_RETRY_TOPIC=${KAFKA_RETRY_TOPIC}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      kafka:
        condition: service_healthy
      log-api-service:
        condition: service_started
      redis:
        condition: service_started

  score-service:
    build: ./score-service
    container_name: score-service
    ports:
      - "${SCORE_SERVICE_PORT:-3002}:${SCORE_SERVICE_PORT:-3002}"
    environment:
      - PORT=${SCORE_SERVICE_PORT:-3002}
      - MONGO_URI=mongodb+srv://${MONGO_USER}:${MONGO_PASSWORD}@${MONGO_CLUSTER}/scoredb?retryWrites=true&w=majority&appName=${MONGO_APP_NAME}
      - REDIS_URL=${REDIS_URL}
      - LOG_API_URL=http://log-api-service:${LOG_API_SERVICE_PORT:-3004}
      - KAFKA_BROKER=${KAFKA_BROKER}
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
      log-api-service:
        condition: service_started

  leaderboard-service:
    build:
      context: ./leaderboard-service
      dockerfile: Dockerfile
    container_name: leaderboard-service
    ports:
      - "${LEADERBOARD_SERVICE_PORT:-3003}:${LEADERBOARD_SERVICE_PORT:-3003}"
    environment:
      - PORT=${LEADERBOARD_SERVICE_PORT:-3003}
      - MONGO_URI=mongodb+srv://${MONGO_USER}:${MONGO_PASSWORD}@${MONGO_CLUSTER}/leaderboarddb?retryWrites=true&w=majority&appName=${MONGO_APP_NAME}
      - REDIS_URL=${REDIS_URL}
      - LOG_API_URL=http://log-api-service:${LOG_API_SERVICE_PORT:-3004}
    depends_on:
      - redis
      - log-api-service

  log-api-service:
    build: ./log-api-service
    container_name: log-api-service
    ports:
      - "${LOG_API_SERVICE_PORT:-3004}:${LOG_API_SERVICE_PORT:-3004}"
    environment:
      - PORT=${LOG_API_SERVICE_PORT:-3004}
      - KAFKA_BROKER=${KAFKA_BROKER}
      - KAFKA_HIGH_PRIORITY_TOPIC=${KAFKA_HIGH_PRIORITY_TOPIC}
      - KAFKA_LOW_PRIORITY_TOPIC=${KAFKA_LOW_PRIORITY_TOPIC}
      - REDIS_URL=${REDIS_URL}
      - LOG_BATCH_SIZE=${LOG_BATCH_SIZE:-50}
      - LOG_BATCH_TIMEOUT_MS=${LOG_BATCH_TIMEOUT_MS:-5000}
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started

  high-priority-log-worker:
    build: ./log-worker-service
    container_name: high-priority-log-worker
    environment:
      - MONGO_URI=mongodb+srv://${MONGO_USER}:${MONGO_PASSWORD}@${MONGO_CLUSTER}/logdb?retryWrites=true&w=majority&appName=${MONGO_APP_NAME}
      - KAFKA_BROKER=${KAFKA_BROKER}
      - KAFKA_LOG_TOPIC=${KAFKA_HIGH_PRIORITY_TOPIC}
      - KAFKA_RETRY_TOPIC=${KAFKA_RETRY_TOPIC}
      - KAFKA_CONSUMER_GROUP=${KAFKA_HIGH_PRIORITY_CONSUMER_GROUP:-high-priority-log-consumer-group}
      - MAX_CONCURRENT_WRITES=${MAX_CONCURRENT_WRITES_HIGH:-5}
      - MAX_WRITE_RATE_PER_SECOND=${MAX_WRITE_RATE_PER_SECOND_HIGH:-20}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started

  low-priority-log-worker:
    build: ./log-worker-service
    container_name: low-priority-log-worker
    environment:
      - MONGO_URI=mongodb+srv://${MONGO_USER}:${MONGO_PASSWORD}@${MONGO_CLUSTER}/logdb?retryWrites=true&w=majority&appName=${MONGO_APP_NAME}
      - KAFKA_BROKER=${KAFKA_BROKER}
      - KAFKA_LOG_TOPIC=${KAFKA_LOW_PRIORITY_TOPIC}
      - KAFKA_RETRY_TOPIC=${KAFKA_RETRY_TOPIC}
      - KAFKA_CONSUMER_GROUP=${KAFKA_LOW_PRIORITY_CONSUMER_GROUP:-low-priority-log-consumer-group}
      - MAX_CONCURRENT_WRITES=${MAX_CONCURRENT_WRITES_LOW:-3}
      - MAX_WRITE_RATE_PER_SECOND=${MAX_WRITE_RATE_PER_SECOND_LOW:-10}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started

  log-retry-worker:
    build: ./log-retry-worker-service
    container_name: log-retry-worker
    environment:
      - MONGO_URI=mongodb+srv://${MONGO_USER}:${MONGO_PASSWORD}@${MONGO_CLUSTER}/logdb?retryWrites=true&w=majority&appName=${MONGO_APP_NAME}
      - KAFKA_BROKER=${KAFKA_BROKER}
      - KAFKA_RETRY_TOPIC=${KAFKA_RETRY_TOPIC}
      - KAFKA_DLQ_TOPIC=${KAFKA_DLQ_TOPIC}
      - KAFKA_CONSUMER_GROUP=${KAFKA_RETRY_CONSUMER_GROUP:-retry-group}
      - MAX_RETRY_ATTEMPTS=${MAX_RETRY_ATTEMPTS:-3}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started

  log-dlq-worker:
    build: ./dlq-service
    container_name: log-dlq-worker
    environment:
      - MONGO_URI=mongodb+srv://${MONGO_USER}:${MONGO_PASSWORD}@${MONGO_CLUSTER}/dlqdb?retryWrites=true&w=majority&appName=${MONGO_APP_NAME}
      - KAFKA_BROKER=${KAFKA_BROKER}
      - KAFKA_DLQ_TOPIC=${KAFKA_DLQ_TOPIC}
      - KAFKA_CONSUMER_GROUP=${KAFKA_DLQ_CONSUMER_GROUP:-dlq-group}
    depends_on:
      kafka:
        condition: service_healthy
